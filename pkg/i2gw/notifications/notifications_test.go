/*
Copyright 2024 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package notifications

import (
	"testing"

	"github.com/stretchr/testify/assert"

	istioclientv1beta1 "istio.io/client-go/pkg/apis/networking/v1beta1"
	networkingv1 "k8s.io/api/networking/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"sigs.k8s.io/controller-runtime/pkg/client"
	gatewayv1 "sigs.k8s.io/gateway-api/apis/v1"
)

func TestCreateNotificationsTables(t *testing.T) {
	testCases := []struct {
		name          string
		notifications map[string][]Notification
		wantedTables  map[string]string
	}{
		{
			name:          "no notifications",
			notifications: map[string][]Notification{},
			wantedTables:  map[string]string{},
		},
		{
			name: "single provider with one notification",
			notifications: map[string][]Notification{
				"provider1": {
					{
						Type:    WarningNotification,
						Message: "warning message",
					},
				},
			},
			wantedTables: map[string]string{
				"provider1": `Notifications from PROVIDER1:
+--------------+-----------------+----------------+
| MESSAGE TYPE |  NOTIFICATION   | CALLING OBJECT |
+--------------+-----------------+----------------+
| WARNING      | warning message |                |
+--------------+-----------------+----------------+
`,
			},
		},
		{
			name: "two providers each with two notifications",
			notifications: map[string][]Notification{
				"istio": {
					{
						Type:    WarningNotification,
						Message: "a very long warning notification generated by VirtualService ns/test from the provider istio",
						CallingObjects: []client.Object{
							&istioclientv1beta1.VirtualService{
								TypeMeta: metav1.TypeMeta{
									Kind: "VirtualService",
								},
								ObjectMeta: metav1.ObjectMeta{
									Name:      "test",
									Namespace: "ns",
								},
							},
						},
					},
					{
						Type:    InfoNotification,
						Message: "successfully converted VirtualService ns/test to HTTPRoute",
						CallingObjects: []client.Object{
							&istioclientv1beta1.VirtualService{
								TypeMeta: metav1.TypeMeta{
									Kind: "VirtualService",
								},
								ObjectMeta: metav1.ObjectMeta{
									Name:      "test",
									Namespace: "ns",
								},
							},
						},
					},
				},
				"kong": {
					{
						Type:    InfoNotification,
						Message: "informational notification from kong provider",
						CallingObjects: []client.Object{
							&networkingv1.Ingress{
								TypeMeta: metav1.TypeMeta{
									Kind: "Ingress",
								},
								ObjectMeta: metav1.ObjectMeta{
									Name:      "ingress-kong",
									Namespace: "default",
								},
							},
						},
					},
					{
						Type:    ErrorNotification,
						Message: "error notification genereated by kong",
					},
				},
			},
			wantedTables: map[string]string{
				"istio": `Notifications from ISTIO:
+--------------+----------------------------------------------------------------------------------------------+-------------------------+
| MESSAGE TYPE |                                         NOTIFICATION                                         |     CALLING OBJECT      |
+--------------+----------------------------------------------------------------------------------------------+-------------------------+
| WARNING      | a very long warning notification generated by VirtualService ns/test from the provider istio | VirtualService: ns/test |
+--------------+----------------------------------------------------------------------------------------------+-------------------------+
| INFO         | successfully converted VirtualService ns/test to HTTPRoute                                   | VirtualService: ns/test |
+--------------+----------------------------------------------------------------------------------------------+-------------------------+
`,
				"kong": `Notifications from KONG:
+--------------+-----------------------------------------------+-------------------------------+
| MESSAGE TYPE |                 NOTIFICATION                  |        CALLING OBJECT         |
+--------------+-----------------------------------------------+-------------------------------+
| INFO         | informational notification from kong provider | Ingress: default/ingress-kong |
+--------------+-----------------------------------------------+-------------------------------+
| ERROR        | error notification genereated by kong         |                               |
+--------------+-----------------------------------------------+-------------------------------+
`,
			},
		},
	}

	for _, tc := range testCases {
		tc := tc
		t.Run(tc.name, func(t *testing.T) {
			na := NotificationAggregator{
				Notifications: tc.notifications,
			}
			result := na.CreateNotificationTables()
			for provider, table := range result {
				assert.Equal(t, tc.wantedTables[provider], table)
			}
		})
	}
}

func TestConvertObjectsToStr(t *testing.T) {
	testCases := []struct {
		name    string
		objects []client.Object
		want    string
	}{
		{
			name: "single object",
			objects: []client.Object{
				&networkingv1.Ingress{
					TypeMeta: metav1.TypeMeta{
						Kind: "Ingress",
					},
					ObjectMeta: metav1.ObjectMeta{
						Name:      "single-ingress",
						Namespace: "test",
					},
				},
			},
			want: "Ingress: test/single-ingress",
		},
		{
			name: "two objects",
			objects: []client.Object{
				&gatewayv1.Gateway{
					TypeMeta: metav1.TypeMeta{
						Kind: "Gateway",
					},
					ObjectMeta: metav1.ObjectMeta{
						Name:      "way",
						Namespace: "gate",
					},
				},
				&gatewayv1.HTTPRoute{
					TypeMeta: metav1.TypeMeta{
						Kind: "HTTPRoute",
					},
					ObjectMeta: metav1.ObjectMeta{
						Name:      "route",
						Namespace: "prod",
					},
				},
			},
			want: "Gateway: gate/way, HTTPRoute: prod/route",
		},
	}

	for _, tc := range testCases {
		tc := tc
		t.Run(tc.name, func(t *testing.T) {
			result := convertObjectsToStr(tc.objects)
			assert.Equal(t, tc.want, result)
		})
	}
}
